<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.suny.association.mapper.MemberMapper">
    <!--这里可以使用嵌套查询跟嵌套结果两种方式进行查询，
       嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集，封装联表查询的数据(去除重复的数据)-->
    <resultMap id="BaseResultMap" type="com.suny.association.pojo.po.Member">
        <id property="memberId" column="member_id"/>
        <result property="memberName" column="member_name"/>
        <result property="memberClassName" column="member_class_name"/>
        <result property="memberSex" column="member_sex"/>
        <result property="memberGradeNumber" column="member_grade_number"/>
        <result property="memberStatus" column="member_status"/>
        <!--部门复杂类型关联-->
        <association property="memberDepartment" column="member_department_id"
                     javaType="com.suny.association.pojo.po.Department">
            <id property="departmentId" column="d_department_id"/>
            <result property="departmentName" column="d_department_name"/>
        </association>
        <!--角色复杂类型关联-->
        <association property="memberRoles" column="member_role" javaType="com.suny.association.pojo.po.MemberRoles">
            <id property="memberRoleId" column="m_r_member_role_id"/>
            <result property="memberRoleName" column="m_r_member_role_name"/>
        </association>
        <!--//这里有问题,这里会引起StackOverFlow的问题,因为管理员也有管理员,所以无限递归-->
        <!--协会成员对应的管理员复杂类型集合-->
        <!-- <association property="memberManager" column="member_manager_id"
                      javaType="com.suny.association.pojo.po.Member"
                      resultMap="BaseResultMap"/>-->
    </resultMap>


    <!--==================================MemberMapper类里面的方法从这里开始=============================-->

    <!--通过查询条件进行查询数据,传进来的是一个封装的查询条件,里面包含一个实体类,offset,limit-->
    <select id="selectByParam" parameterType="hashmap" resultMap="BaseResultMap">
        SELECT
        m.member_id,
        m.member_name,
        m.member_class_name,
        m.member_sex,
        m.member_grade_number,
        m.member_manager_id,
        m.member_department_id,
        m.member_status,
        m.member_role_id,
        mr.member_role_id AS m_r_member_role_id,
        mr.member_role_name AS m_r_member_role_name,
        d.department_id AS d_department_id,
        d.department_name AS d_department_name
        FROM member AS m LEFT JOIN
        member_roles mr
        ON mr.`member_role_id` = m.`member_role_id`
        LEFT JOIN department d
        ON d.`department_id` = m.`member_department_id`
        <where>
            1=1
            <if test="entity.memberId != null">AND m.member_id =#{entity.memberId}</if>
            <if test="entity.memberName != null">AND m.member_name =#{entity.memberName}</if>
            <if test="entity.memberClassName != null">AND m.member_class_name =#{entity.memberClassName}</if>
            <if test="entity.memberSex != null">AND m.member_sex =#{entity.memberSex}</if>
            <if test="entity.memberGradeNumber != null">AND m.member_grade_number =#{entity.memberGradeNumber}</if>
            <if test="entity.memberManager !=null and entity.memberManager.memberId != null">AND m.member_manager_id
                =#{entity.memberManager.memberId}
            </if>
            <if test="entity.memberDepartment !=null and entity.memberDepartment.departmentId != null">AND
                m.member_department_id =#{entity.memberDepartment.departmentId}
            </if>
            <if test="entity.memberStatus != null">AND m.member_status =#{entity.memberStatus}</if>
            <if test="entity.memberRoles !=null and entity.memberRoles.memberRoleId != null">AND m.member_role_id
                =#{entity.memberRoles.memberRoleId}
            </if>
        </where>
        LIMIT #{offset},#{limit}
    </select>

    <!--插入一条数据并返回自动生成的主键ID-->
    <insert id="insertAndReturnId" parameterType="com.suny.association.pojo.po.Member" useGeneratedKeys="true"
            keyProperty="memberId">
        INSERT INTO member
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="memberId != null">member_id ,</if>
            <if test="memberName != null">member_name ,</if>
            <if test="memberClassName != null">member_class_name ,</if>
            <if test="memberSex != null">member_sex ,</if>
            <if test="memberGradeNumber != null">member_grade_number ,</if>
            <if test="memberManager != null and memberManager.memberId != null">member_manager_id ,</if>
            <if test="memberDepartment != null and memberDepartment.departmentId != null">member_department_id ,</if>
            <if test="memberStatus != null">member_status,</if>
            <if test="memberRoles != null and memberRoles.memberRoleId != null">member_role_id</if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="memberId != null">#{memberId} ,</if>
            <if test="memberName != null">#{memberName} ,</if>
            <if test="memberClassName != null">#{memberClassName} ,</if>
            <if test="memberSex != null">#{memberSex} ,</if>
            <if test="memberGradeNumber != null">#{memberGradeNumber} ,</if>
            <if test="memberManager != null and memberManager.memberId != null">#{memberManager.memberId} ,</if>
            <if test="memberDepartment != null and memberDepartment.departmentId != null">
                #{memberDepartment.departmentId} ,
            </if>
            <if test="memberStatus != null">#{memberStatus} ,</if>
            <if test="memberRoles != null and memberRoles.memberRoleId != null">#{memberRoles.memberRoleId}</if>
        </trim>
    </insert>
    <!--往数据库插入一条新的数据-->
    <insert id="insert" parameterType="com.suny.association.pojo.po.Member" useGeneratedKeys="true"
            keyProperty="memberId">
        INSERT INTO member
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="memberId != null">member_id ,</if>
            <if test="memberName != null">member_name ,</if>
            <if test="memberClassName != null">member_class_name ,</if>
            <if test="memberSex != null">member_sex ,</if>
            <if test="memberGradeNumber != null">member_grade_number ,</if>
            <if test="memberManager ！= null and memberManager.memberId != null">member_manager_id ,</if>
            <if test="memberDepartment != null and memberDepartment.departmentId != null">member_department_id ,</if>
            <if test="memberStatus != null">member_status,</if>
            <if test="memberRoles != null and memberRoles.memberRoleId != null">member_role_id</if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="memberId != null">#{memberId} ,</if>
            <if test="memberName != null">#{memberName} ,</if>
            <if test="memberClassName != null">#{memberClassName} ,</if>
            <if test="memberSex != null">#{memberSex} ,</if>
            <if test="memberGradeNumber != null">#{memberGradeNumber} ,</if>
            <if test="memberManager ！= null and memberManager.memberId != null">#{memberManager.memberId} ,</if>
            <if test="memberDepartment != null and memberDepartment.departmentId != null">
                #{memberDepartment.departmentId} ,
            </if>
            <if test="memberStatus != null">#{memberStatus} ,</if>
            <if test="memberRoles != null and memberRoles.memberRoleId != null">#{memberRoles.memberRoleId}</if>
        </trim>
    </insert>
    <!--通过ID删除一条数据-->
    <delete id="deleteById" parameterType="Long">
        DELETE FROM member
        WHERE member_id = #{id}
    </delete>
    <!--更新数据库中一条数据-->
    <update id="update" parameterType="com.suny.association.pojo.po.Member">
        UPDATE member
        <trim prefix="set" suffixOverrides=",">
            <if test="memberId != null">member_id = #{memberId,jdbcType=BIGINT} ,</if>
            <if test="memberName != null">member_name =#{memberName,jdbcType=VARCHAR},</if>
            <if test="memberClassName != null">member_class_name =#{memberClassName,jdbcType=VARCHAR},</if>
            <if test="memberSex != null">member_sex =#{memberSex,jdbcType=BOOLEAN},</if>
            <if test="memberGradeNumber != null">member_grade_number =#{memberGradeNumber,jdbcType=INTEGER},</if>
            <if test="memberManager != null">member_manager_id =#{memberManager,jdbcType=BIGINT},</if>
            <if test="memberDepartment != null">member_department_id
                =#{memberDepartment.departmentId,jdbcType=INTEGER},
            </if>
            <if test="memberStatus != null">member_status =#{memberStatus,jdbcType=BOOLEAN},</if>
            <if test="memberRoles != null">member_role_id =#{memberRoles.memberRoleId,jdbcType=INTEGER}</if>
        </trim>
        where member_id=#{memberId}
    </update>

    <!--这里需要进行更改的是协会管理员角色的ID,建议设置一个基础的成员ID,基础成员ID以上可以是管理员-->
    <select id="selectFreezeManager" resultMap="BaseResultMap">
        # 在这里member_role_id >2 的就是管理员状态
        SELECT
        <include refid="selectFields"/>
        FROM member
        WHERE member_role_id > 2
        AND
        member_status = 0
    </select>
    <!--查询数据库中状态正常的管理员信息-->
    <select id="selectNormalManager" resultMap="BaseResultMap">
        SELECT
        <include refid="selectFields"/>
        FROM member
        WHERE member_role_id > 2
        AND
        member_status = 1
    </select>
    <!--查询数据库中状态被冻结的普通成员-->
    <select id="selectFreezeMember" resultMap="BaseResultMap">
        SELECT
        <include refid="selectFields"/>
        FROM member
        WHERE member_role_id <![CDATA[
        <
        ]]> 2
        AND member_status = 0
    </select>
    <!--查询数据库中正常状态的协会普通成员-->
    <select id="selectNormalMember" resultMap="BaseResultMap">
        SELECT
        <include refid="selectFields"/>
        FROM member
        WHERE
        member_role_id <![CDATA[
        <
        ]]>2
        AND member_status = 1
    </select>
    <!--通过主键ID查询一个协会成员的信息-->
    <select id="selectById" parameterType="Long" resultMap="BaseResultMap">
        SELECT
        <include refid="selectFields"/>
        FROM member
        WHERE member_id = #{id}
    </select>

    <!--直接查询数据库中对应表的所有数据,谨慎使用-->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT
        <include refid="selectFields"/>
        FROM member
    </select>

    <!--查询数据库表中数据的数量-->
    <select id="selectCount" resultType="int">
        SELECT count(member_id)
        FROM member
    </select>

    <!-- <select id="selectAllByConditions" resultMap="BaseResultMap">
         SELECT
         <include refid="selectFields"/>
         FROM member
         WHERE member_department_id =
         ( SELECT department_id
         FROM department
         <if test="#{departmentname}!=null || #{ departmentname}==''">
             WHERE department_name LIKE '%#{departmentname}%') AND
         </if>
         member_status =1
         LIMIT
         #{offset},#{limit}


     </select>-->


    <!--查过角色ID查询拥有这个角色的成员列表-->
    <select id="selectByMemberRoleId" parameterType="int" resultType="com.suny.association.pojo.po.Member">
        SELECT
            member_id,
            member_id
        FROM member AS m
        WHERE m.member_role_id = #{memberRoleId}
    </select>


    <!--这个方法可能会发生查出多个数据问题,禁止调用-->
    <!--<select id="selectByName" resultMap="BaseResultMap" parameterType="string">
        SELECT
        <include refid="selectFields"/>
        FROM member
        WHERE member_name = #{name}
    </select>-->

    <!--根据成员届级跟角色ID去查询对应的成员,这里的条件设置的是同时满足这3个条件【成员在协会状态为正常,角色小于xxx,并且届级等于xxx】-->
    <select id="selectLimitMemberByParam" resultMap="BaseResultMap">
        SELECT
            m.member_id,
            m.member_role_id,
            m.member_grade_number
        FROM member AS m
        WHERE m.member_role_id <![CDATA[
        <=
        ]]> #{limitMemberRoleId} AND m.member_grade_number = #{memberGrade} AND m.member_status = 1
    </select>


    <sql id="selectFields">
        m.member_id, m.member_name, m.member_class_name, m.member_sex, m.member_grade_number, m.member_manager_id, m.member_department_id,
        m.member_status, m.member_role_id
    </sql>


</mapper>